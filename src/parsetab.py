
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMArightASSIGNleftLOGICAL_ORleftLOGICAL_ANDleftEQNOT_EQleftLSGRLS_EQGR_EQleftADDSUBleftMULDIVMODrightNOTnonassocELSELOWER_THAN_ELSEADD ADD_ASSIGN ASSIGN BLP BREAK BRP CHAR CHAR_CONSTANT CHAR_STAR COMMA CONST CONTINUE DECREMENT DEC_CONSTANT DIV DIV_ASSIGN ELSE EQ FLOAT FLOAT_CONSTANT FOR GR GR_EQ HEX_CONSTANT IDENTIFIER IF INCREMENT INT LOGICAL_AND LOGICAL_OR LONG LONG_LONG LOWER_THAN_ELSE LP LS LS_EQ MLP MOD MOD_ASSIGN MRP MUL MUL_ASSIGN NOT NOT_EQ PRNTF RETURN RP SEMICOLON SHORT SIGNED STRING SUB SUB_ASSIGN UNSIGNED VOID WHILEstarter : starter builder\n               | builderbuilder : function\n               | declarationfunction : type identifier seen_identifier LP argument_list seen_argument_list RP compound_stmtseen_identifier :seen_argument_list :type : data_type pointer\n            | data_typedata_type : sign_specifier type_specifier\n                 | type_specifierpointer : MUL pointer\n               | MUL sign_specifier : SIGNED\n                      | UNSIGNEDtype_specifier : INT\n                      | SHORT INT\n                      | SHORT\n                      | LONG\n                      | LONG_LONG\n                      | LONG INT\n                      | LONG_LONG INT\n                      | CHAR\n                      | FLOAT\n                      | VOID\n                      | CHAR_STARargument_list : arguments\n                     | arguments : arguments COMMA arg\n                 | argarg : type identifierstmt : compound_stmt\n            | single_stmtcompound_stmt : BLP seen_BLP statements BRP seen_BLP :statements : statements M stmt\n                  | single_stmt : if_block seen_control\n                   | for_block seen_control\n                   | while_block seen_control\n                   | declaration\n                   | function_call SEMICOLON\n                   | RETURN SEMICOLON\n                   | prntf_call SEMICOLON\n                   | RETURN sub_expr SEMICOLON\n                   | CONTINUE SEMICOLON\n                   | BREAK SEMICOLON seen_control :expression_stmt : expression SEMICOLON\n                       | SEMICOLON for_block : FOR LP expression_stmt M expression_stmt M expression RP before_loop N M stmt after_loopbefore_loop :after_loop :if_block :  IF LP expression RP M stmt ELSE N M stmt\n                | IF LP expression RP M stmtwhile_block : WHILE M LP expression RP M before_loop stmt after_loopdeclaration : type declaration_list SEMICOLON\n                   | declaration_list SEMICOLON\n                   | unary_exprdeclaration_list : declaration_list COMMA sub_decl\n                        | sub_declsub_decl : assignment_expr\n                | identifier\n                | array_accessexpression : expression COMMA sub_expr\n                  | sub_exprsub_expr : sub_expr GR sub_expr\n                | sub_expr LS sub_expr\n                | sub_expr EQ sub_expr\n                | sub_expr NOT_EQ sub_expr\n                | sub_expr GR_EQ sub_expr\n                | sub_expr LS_EQ sub_expr\n                | sub_expr LOGICAL_AND M sub_expr\n                | sub_expr LOGICAL_OR M sub_expr\n                | NOT sub_expr\n                | arithmetic_expr seen_arith\n                | assignment_expr\n                | unary_exprseen_arith :assignment_expr : lhs assign arithmetic_expr seen_arch\n                       | lhs assign array_access seen_array\n                       | lhs assign function_call seen_func_call\n                       | lhs assign unary_expr seen_unaryseen_arch :seen_array :seen_func_call :seen_unary :unary_expr : identifier INCREMENT\n                  | identifier DECREMENT\n                  | DECREMENT identifier\n                  | INCREMENT identifierlhs : identifier seen_id\n           | array_accessseen_id :identifier : IDENTIFIERassign : ASSIGN\n              | ADD_ASSIGN\n              | SUB_ASSIGN\n              | DIV_ASSIGN\n              | MOD_ASSIGN\n              | MUL_ASSIGNarithmetic_expr : arithmetic_expr ADD arithmetic_expr\n                       | arithmetic_expr SUB arithmetic_expr\n                       | arithmetic_expr MUL arithmetic_expr\n                       | arithmetic_expr DIV arithmetic_expr\n                       | arithmetic_expr MOD arithmetic_expr\n                       | LP arithmetic_expr RP\n                       | SUB arithmetic_expr\n                       | identifier\n                       | constantconstant : DEC_CONSTANT\n                | HEX_CONSTANT\n                | CHAR_CONSTANT\n                | FLOAT_CONSTANTarray_access : identifier MLP array_index MRP array_index : constant\n                   | identifierfunction_call : identifier LP parameter_list RP\n                     | identifier LP RP prntf_call : PRNTF LP STRING RP\n                   | PRNTF LP STRING COMMA parameter_list RPparameter_list : parameter_list COMMA parameter\n                      | parameter parameter : sub_expr\n                 | STRINGM : N : '
    
_lr_action_items = {'DECREMENT':([0,1,2,3,4,6,8,17,29,32,33,36,40,41,46,47,48,49,50,51,52,54,71,87,98,104,113,114,115,116,117,118,119,120,121,133,134,135,136,139,140,141,142,143,144,145,146,147,148,149,151,159,161,162,163,164,165,167,168,169,170,171,174,177,179,180,182,183,184,185,188,189,191,192,194,195,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[12,12,-2,-3,-4,33,-59,-95,-1,-88,-89,-58,-91,-90,12,-96,-97,-98,-99,-100,-101,-57,33,12,33,12,12,12,12,12,12,12,12,-126,-126,12,12,-5,-35,-37,-126,-34,12,-36,-32,-33,-48,-48,-48,-41,12,33,-38,-39,-40,-42,-43,-44,-46,-47,12,12,-45,-126,-50,12,-126,12,12,-49,12,12,-126,-126,-55,12,-52,-127,12,-126,-52,-53,12,-127,-56,-54,-126,12,-53,-51,]),'INCREMENT':([0,1,2,3,4,6,8,17,29,32,33,36,40,41,46,47,48,49,50,51,52,54,71,87,98,104,113,114,115,116,117,118,119,120,121,133,134,135,136,139,140,141,142,143,144,145,146,147,148,149,151,159,161,162,163,164,165,167,168,169,170,171,174,177,179,180,182,183,184,185,188,189,191,192,194,195,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[11,11,-2,-3,-4,32,-59,-95,-1,-88,-89,-58,-91,-90,11,-96,-97,-98,-99,-100,-101,-57,32,11,32,11,11,11,11,11,11,11,11,-126,-126,11,11,-5,-35,-37,-126,-34,11,-36,-32,-33,-48,-48,-48,-41,11,32,-38,-39,-40,-42,-43,-44,-46,-47,11,11,-45,-126,-50,11,-126,11,11,-49,11,11,-126,-126,-55,11,-52,-127,11,-126,-52,-53,11,-127,-56,-54,-126,11,-53,-51,]),'IDENTIFIER':([0,1,2,3,4,5,8,9,11,12,14,17,20,21,22,23,24,25,26,27,29,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,64,69,70,76,77,78,79,80,87,88,104,113,114,115,116,117,118,119,120,121,133,134,135,136,139,140,141,142,143,144,145,146,147,148,149,151,158,161,162,163,164,165,167,168,169,170,171,174,177,179,180,182,183,184,185,188,189,191,192,194,195,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[17,17,-2,-3,-4,17,-59,-9,17,17,-11,-95,-16,-18,-19,-20,-23,-24,-25,-26,-1,-88,-89,17,-58,17,-8,-13,-91,-90,-10,-17,-21,-22,17,-96,-97,-98,-99,-100,-101,-57,-12,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-126,-126,17,17,-5,-35,-37,-126,-34,17,-36,-32,-33,-48,-48,-48,-41,17,17,-38,-39,-40,-42,-43,-44,-46,-47,17,17,-45,-126,-50,17,-126,17,17,-49,17,17,-126,-126,-55,17,-52,-127,17,-126,-52,-53,17,-127,-56,-54,-126,17,-53,-51,]),'SIGNED':([0,1,2,3,4,8,17,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[18,18,-2,-3,-4,-59,-95,-1,-88,-89,-58,-91,-90,-57,18,18,-5,-35,-37,-126,-34,18,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,18,-126,-55,-52,-127,18,-126,-52,-53,18,-127,-56,-54,-126,18,-53,-51,]),'UNSIGNED':([0,1,2,3,4,8,17,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[19,19,-2,-3,-4,-59,-95,-1,-88,-89,-58,-91,-90,-57,19,19,-5,-35,-37,-126,-34,19,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,19,-126,-55,-52,-127,19,-126,-52,-53,19,-127,-56,-54,-126,19,-53,-51,]),'INT':([0,1,2,3,4,8,13,17,18,19,21,22,23,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[20,20,-2,-3,-4,-59,20,-95,-14,-15,43,44,45,-1,-88,-89,-58,-91,-90,-57,20,20,-5,-35,-37,-126,-34,20,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,20,-126,-55,-52,-127,20,-126,-52,-53,20,-127,-56,-54,-126,20,-53,-51,]),'SHORT':([0,1,2,3,4,8,13,17,18,19,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[21,21,-2,-3,-4,-59,21,-95,-14,-15,-1,-88,-89,-58,-91,-90,-57,21,21,-5,-35,-37,-126,-34,21,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,21,-126,-55,-52,-127,21,-126,-52,-53,21,-127,-56,-54,-126,21,-53,-51,]),'LONG':([0,1,2,3,4,8,13,17,18,19,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[22,22,-2,-3,-4,-59,22,-95,-14,-15,-1,-88,-89,-58,-91,-90,-57,22,22,-5,-35,-37,-126,-34,22,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,22,-126,-55,-52,-127,22,-126,-52,-53,22,-127,-56,-54,-126,22,-53,-51,]),'LONG_LONG':([0,1,2,3,4,8,13,17,18,19,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[23,23,-2,-3,-4,-59,23,-95,-14,-15,-1,-88,-89,-58,-91,-90,-57,23,23,-5,-35,-37,-126,-34,23,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,23,-126,-55,-52,-127,23,-126,-52,-53,23,-127,-56,-54,-126,23,-53,-51,]),'CHAR':([0,1,2,3,4,8,13,17,18,19,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[24,24,-2,-3,-4,-59,24,-95,-14,-15,-1,-88,-89,-58,-91,-90,-57,24,24,-5,-35,-37,-126,-34,24,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,24,-126,-55,-52,-127,24,-126,-52,-53,24,-127,-56,-54,-126,24,-53,-51,]),'FLOAT':([0,1,2,3,4,8,13,17,18,19,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[25,25,-2,-3,-4,-59,25,-95,-14,-15,-1,-88,-89,-58,-91,-90,-57,25,25,-5,-35,-37,-126,-34,25,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,25,-126,-55,-52,-127,25,-126,-52,-53,25,-127,-56,-54,-126,25,-53,-51,]),'VOID':([0,1,2,3,4,8,13,17,18,19,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[26,26,-2,-3,-4,-59,26,-95,-14,-15,-1,-88,-89,-58,-91,-90,-57,26,26,-5,-35,-37,-126,-34,26,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,26,-126,-55,-52,-127,26,-126,-52,-53,26,-127,-56,-54,-126,26,-53,-51,]),'CHAR_STAR':([0,1,2,3,4,8,13,17,18,19,29,32,33,36,40,41,54,73,111,135,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[27,27,-2,-3,-4,-59,27,-95,-14,-15,-1,-88,-89,-58,-91,-90,-57,27,27,-5,-35,-37,-126,-34,27,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,27,-126,-55,-52,-127,27,-126,-52,-53,27,-127,-56,-54,-126,27,-53,-51,]),'$end':([1,2,3,4,8,17,29,32,33,36,40,41,54,135,141,],[0,-2,-3,-4,-59,-95,-1,-88,-89,-58,-91,-90,-57,-5,-34,]),'SEMICOLON':([6,7,10,15,16,17,30,31,32,33,40,41,58,59,60,61,62,63,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,105,106,107,112,122,123,127,128,129,130,131,132,137,138,150,151,152,153,154,159,166,171,176,177,178,179,184,185,187,190,197,],[-63,36,-61,-62,-64,-95,-63,54,-88,-89,-91,-90,-111,-112,-113,-114,-60,-63,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,-79,-77,-78,-118,-75,-76,-67,-68,-69,-70,-71,-72,-73,-74,164,165,167,168,169,-63,174,179,-66,-126,185,-50,179,-49,-120,-65,-121,]),'COMMA':([6,7,10,15,16,17,30,31,32,33,40,41,58,59,60,61,62,63,65,66,67,68,71,72,74,75,81,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,109,112,122,123,125,126,127,128,129,130,131,132,137,138,159,175,176,178,181,186,190,193,199,],[-63,37,-61,-62,-64,-95,-63,37,-88,-89,-91,-90,-111,-112,-113,-114,-60,-63,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,111,-30,-102,-103,-104,-105,-106,-107,-109,113,-119,-123,-124,-125,-79,-77,-78,-31,-118,-75,-76,-29,-122,-67,-68,-69,-70,-71,-72,-73,-74,-63,183,-66,183,188,183,-65,113,183,]),'MLP':([6,17,30,63,71,98,159,],[34,-95,34,34,34,34,34,]),'ASSIGN':([6,16,17,28,30,35,63,74,98,108,159,],[-94,-93,-95,47,-94,-92,-94,-115,-94,-93,-94,]),'ADD_ASSIGN':([6,16,17,28,30,35,63,74,98,108,159,],[-94,-93,-95,48,-94,-92,-94,-115,-94,-93,-94,]),'SUB_ASSIGN':([6,16,17,28,30,35,63,74,98,108,159,],[-94,-93,-95,49,-94,-92,-94,-115,-94,-93,-94,]),'DIV_ASSIGN':([6,16,17,28,30,35,63,74,98,108,159,],[-94,-93,-95,50,-94,-92,-94,-115,-94,-93,-94,]),'MOD_ASSIGN':([6,16,17,28,30,35,63,74,98,108,159,],[-94,-93,-95,51,-94,-92,-94,-115,-94,-93,-94,]),'MUL_ASSIGN':([6,16,17,28,30,35,63,74,98,108,159,],[-94,-93,-95,52,-94,-92,-94,-115,-94,-93,-94,]),'BRP':([8,17,32,33,36,40,41,54,136,139,140,141,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,194,203,206,207,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-35,-37,141,-34,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-55,-53,-56,-54,-53,-51,]),'BLP':([8,17,32,33,36,40,41,54,124,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,136,-35,-37,-126,-34,136,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,136,-126,-55,-52,-127,136,-126,-52,-53,136,-127,-56,-54,-126,136,-53,-51,]),'RETURN':([8,17,32,33,36,40,41,54,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-35,-37,-126,-34,151,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,151,-126,-55,-52,-127,151,-126,-52,-53,151,-127,-56,-54,-126,151,-53,-51,]),'CONTINUE':([8,17,32,33,36,40,41,54,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-35,-37,-126,-34,153,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,153,-126,-55,-52,-127,153,-126,-52,-53,153,-127,-56,-54,-126,153,-53,-51,]),'BREAK':([8,17,32,33,36,40,41,54,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-35,-37,-126,-34,154,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,154,-126,-55,-52,-127,154,-126,-52,-53,154,-127,-56,-54,-126,154,-53,-51,]),'IF':([8,17,32,33,36,40,41,54,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-35,-37,-126,-34,155,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,155,-126,-55,-52,-127,155,-126,-52,-53,155,-127,-56,-54,-126,155,-53,-51,]),'FOR':([8,17,32,33,36,40,41,54,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-35,-37,-126,-34,156,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,156,-126,-55,-52,-127,156,-126,-52,-53,156,-127,-56,-54,-126,156,-53,-51,]),'WHILE':([8,17,32,33,36,40,41,54,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-35,-37,-126,-34,157,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,157,-126,-55,-52,-127,157,-126,-52,-53,157,-127,-56,-54,-126,157,-53,-51,]),'PRNTF':([8,17,32,33,36,40,41,54,136,139,140,141,142,143,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,182,189,192,194,196,198,200,201,202,203,204,205,206,207,208,209,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-35,-37,-126,-34,160,-36,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,-126,160,-126,-55,-52,-127,160,-126,-52,-53,160,-127,-56,-54,-126,160,-53,-51,]),'ELSE':([8,17,32,33,36,40,41,54,141,144,145,146,147,148,149,161,162,163,164,165,167,168,169,174,194,203,206,207,210,211,],[-59,-95,-88,-89,-58,-91,-90,-57,-34,-32,-33,-48,-48,-48,-41,-38,-39,-40,-42,-43,-44,-46,-47,-45,198,-53,-56,-54,-53,-51,]),'MUL':([9,14,17,20,21,22,23,24,25,26,27,39,42,43,44,45,58,59,60,61,65,71,72,84,85,86,92,93,94,95,96,97,98,105,],[39,-11,-95,-16,-18,-19,-20,-23,-24,-25,-26,39,-10,-17,-21,-22,-111,-112,-113,-114,78,-109,-110,78,-109,78,78,78,-104,-105,-106,-107,-109,78,]),'LP':([17,30,46,47,48,49,50,51,52,53,69,70,71,76,77,78,79,80,87,104,113,114,115,116,117,118,119,120,121,133,134,151,155,156,157,159,160,170,171,172,177,179,180,183,184,185,188,191,195,],[-95,-6,70,-96,-97,-98,-99,-100,-101,73,70,70,87,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-126,-126,70,70,70,170,171,-126,87,173,70,70,180,-126,-50,70,70,70,-49,70,-126,70,]),'GR':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,102,105,106,107,112,122,123,127,128,129,130,131,132,137,138,166,176,190,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,114,-79,-77,-78,-118,-75,-76,-67,-68,114,114,-71,-72,114,114,114,114,114,]),'LS':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,102,105,106,107,112,122,123,127,128,129,130,131,132,137,138,166,176,190,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,115,-79,-77,-78,-118,-75,-76,-67,-68,115,115,-71,-72,115,115,115,115,115,]),'EQ':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,102,105,106,107,112,122,123,127,128,129,130,131,132,137,138,166,176,190,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,116,-79,-77,-78,-118,-75,-76,-67,-68,-69,-70,-71,-72,116,116,116,116,116,]),'NOT_EQ':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,102,105,106,107,112,122,123,127,128,129,130,131,132,137,138,166,176,190,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,117,-79,-77,-78,-118,-75,-76,-67,-68,-69,-70,-71,-72,117,117,117,117,117,]),'GR_EQ':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,102,105,106,107,112,122,123,127,128,129,130,131,132,137,138,166,176,190,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,118,-79,-77,-78,-118,-75,-76,-67,-68,118,118,-71,-72,118,118,118,118,118,]),'LS_EQ':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,102,105,106,107,112,122,123,127,128,129,130,131,132,137,138,166,176,190,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,119,-79,-77,-78,-118,-75,-76,-67,-68,119,119,-71,-72,119,119,119,119,119,]),'LOGICAL_AND':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,102,105,106,107,112,122,123,127,128,129,130,131,132,137,138,166,176,190,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,120,-79,-77,-78,-118,-75,-76,-67,-68,-69,-70,-71,-72,-73,120,120,120,120,]),'LOGICAL_OR':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,74,75,81,82,83,84,85,92,93,94,95,96,97,98,100,102,105,106,107,112,122,123,127,128,129,130,131,132,137,138,166,176,190,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-115,-80,-81,-82,-83,-108,-109,-102,-103,-104,-105,-106,-107,-109,-119,121,-79,-77,-78,-118,-75,-76,-67,-68,-69,-70,-71,-72,-73,-74,121,121,121,]),'RP':([17,32,33,40,41,58,59,60,61,65,66,67,68,71,72,73,74,75,81,82,83,84,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,109,110,112,122,123,125,126,127,128,129,130,131,132,137,138,175,176,181,186,190,193,199,],[-95,-88,-89,-91,-90,-111,-112,-113,-114,-84,-85,-86,-87,-109,-110,-28,-115,-80,-81,-82,-83,-108,-109,97,100,-7,-27,-30,-102,-103,-104,-105,-106,-107,-109,112,-119,-123,-124,-125,-79,-77,-78,-31,124,-118,-75,-76,-29,-122,-67,-68,-69,-70,-71,-72,-73,-74,182,-66,187,192,-65,197,202,]),'MRP':([17,55,56,57,58,59,60,61,],[-95,-117,74,-116,-111,-112,-113,-114,]),'ADD':([17,58,59,60,61,65,71,72,84,85,86,92,93,94,95,96,97,98,105,],[-95,-111,-112,-113,-114,76,-109,-110,-108,-109,76,-102,-103,-104,-105,-106,-107,-109,76,]),'SUB':([17,46,47,48,49,50,51,52,58,59,60,61,65,69,70,71,72,76,77,78,79,80,84,85,86,87,92,93,94,95,96,97,98,104,105,113,114,115,116,117,118,119,120,121,133,134,151,170,171,177,179,180,183,184,185,188,191,195,],[-95,69,-96,-97,-98,-99,-100,-101,-111,-112,-113,-114,77,69,69,-109,-110,69,69,69,69,69,-108,-109,77,69,-102,-103,-104,-105,-106,-107,-109,69,77,69,69,69,69,69,69,69,-126,-126,69,69,69,69,69,-126,-50,69,69,69,-49,69,-126,69,]),'DIV':([17,58,59,60,61,65,71,72,84,85,86,92,93,94,95,96,97,98,105,],[-95,-111,-112,-113,-114,79,-109,-110,79,-109,79,79,79,-104,-105,-106,-107,-109,79,]),'MOD':([17,58,59,60,61,65,71,72,84,85,86,92,93,94,95,96,97,98,105,],[-95,-111,-112,-113,-114,80,-109,-110,80,-109,80,80,80,-104,-105,-106,-107,-109,80,]),'DEC_CONSTANT':([34,46,47,48,49,50,51,52,69,70,76,77,78,79,80,87,104,113,114,115,116,117,118,119,120,121,133,134,151,170,171,177,179,180,183,184,185,188,191,195,],[58,58,-96,-97,-98,-99,-100,-101,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-126,-126,58,58,58,58,58,-126,-50,58,58,58,-49,58,-126,58,]),'HEX_CONSTANT':([34,46,47,48,49,50,51,52,69,70,76,77,78,79,80,87,104,113,114,115,116,117,118,119,120,121,133,134,151,170,171,177,179,180,183,184,185,188,191,195,],[59,59,-96,-97,-98,-99,-100,-101,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-126,-126,59,59,59,59,59,-126,-50,59,59,59,-49,59,-126,59,]),'CHAR_CONSTANT':([34,46,47,48,49,50,51,52,69,70,76,77,78,79,80,87,104,113,114,115,116,117,118,119,120,121,133,134,151,170,171,177,179,180,183,184,185,188,191,195,],[60,60,-96,-97,-98,-99,-100,-101,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-126,-126,60,60,60,60,60,-126,-50,60,60,60,-49,60,-126,60,]),'FLOAT_CONSTANT':([34,46,47,48,49,50,51,52,69,70,76,77,78,79,80,87,104,113,114,115,116,117,118,119,120,121,133,134,151,170,171,177,179,180,183,184,185,188,191,195,],[61,61,-96,-97,-98,-99,-100,-101,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-126,-126,61,61,61,61,61,-126,-50,61,61,61,-49,61,-126,61,]),'STRING':([87,113,173,188,],[103,103,181,103,]),'NOT':([87,104,113,114,115,116,117,118,119,120,121,133,134,151,170,171,177,179,180,183,184,185,188,191,195,],[104,104,104,104,104,104,104,104,104,-126,-126,104,104,104,104,104,-126,-50,104,104,104,-49,104,-126,104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'starter':([0,],[1,]),'builder':([0,1,],[2,29,]),'function':([0,1,],[3,3,]),'declaration':([0,1,142,189,200,204,209,],[4,4,149,149,149,149,149,]),'type':([0,1,73,111,142,189,200,204,209,],[5,5,88,88,158,158,158,158,158,]),'identifier':([0,1,5,11,12,34,37,46,69,70,76,77,78,79,80,87,88,104,113,114,115,116,117,118,119,133,134,142,151,158,170,171,180,183,184,188,189,195,200,204,209,],[6,6,30,40,41,55,63,71,85,85,85,85,85,85,85,98,109,98,98,98,98,98,98,98,98,98,98,159,98,63,98,98,98,98,98,98,159,98,159,159,159,]),'declaration_list':([0,1,5,142,158,189,200,204,209,],[7,7,31,7,31,7,7,7,7,]),'unary_expr':([0,1,46,87,104,113,114,115,116,117,118,119,133,134,142,151,170,171,180,183,184,188,189,195,200,204,209,],[8,8,68,107,107,107,107,107,107,107,107,107,107,107,8,107,107,107,107,107,107,107,8,107,8,8,8,]),'data_type':([0,1,73,111,142,189,200,204,209,],[9,9,9,9,9,9,9,9,9,]),'sub_decl':([0,1,5,37,142,158,189,200,204,209,],[10,10,10,62,10,10,10,10,10,10,]),'sign_specifier':([0,1,73,111,142,189,200,204,209,],[13,13,13,13,13,13,13,13,13,]),'type_specifier':([0,1,13,73,111,142,189,200,204,209,],[14,14,42,14,14,14,14,14,14,14,]),'assignment_expr':([0,1,5,37,87,104,113,114,115,116,117,118,119,133,134,142,151,158,170,171,180,183,184,188,189,195,200,204,209,],[15,15,15,15,106,106,106,106,106,106,106,106,106,106,106,15,106,15,106,106,106,106,106,106,15,106,15,15,15,]),'array_access':([0,1,5,37,46,87,104,113,114,115,116,117,118,119,133,134,142,151,158,170,171,180,183,184,188,189,195,200,204,209,],[16,16,16,16,66,108,108,108,108,108,108,108,108,108,108,108,16,108,16,108,108,108,108,108,108,16,108,16,16,16,]),'lhs':([0,1,5,37,87,104,113,114,115,116,117,118,119,133,134,142,151,158,170,171,180,183,184,188,189,195,200,204,209,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'seen_id':([6,30,63,98,159,],[35,35,35,35,35,]),'pointer':([9,39,],[38,64,]),'assign':([28,],[46,]),'seen_identifier':([30,],[53,]),'array_index':([34,],[56,]),'constant':([34,46,69,70,76,77,78,79,80,87,104,113,114,115,116,117,118,119,133,134,151,170,171,180,183,184,188,195,],[57,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'arithmetic_expr':([46,69,70,76,77,78,79,80,87,104,113,114,115,116,117,118,119,133,134,151,170,171,180,183,184,188,195,],[65,84,86,92,93,94,95,96,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'function_call':([46,142,189,200,204,209,],[67,150,150,150,150,150,]),'seen_arch':([65,],[75,]),'seen_array':([66,],[81,]),'seen_func_call':([67,],[82,]),'seen_unary':([68,],[83,]),'argument_list':([73,],[89,]),'arguments':([73,],[90,]),'arg':([73,111,],[91,125,]),'parameter_list':([87,188,],[99,193,]),'parameter':([87,113,188,],[101,126,101,]),'sub_expr':([87,104,113,114,115,116,117,118,119,133,134,151,170,171,180,183,184,188,195,],[102,122,102,127,128,129,130,131,132,137,138,166,176,176,176,190,176,102,176,]),'seen_argument_list':([89,],[110,]),'seen_arith':([105,],[123,]),'M':([120,121,140,157,177,182,191,192,201,208,],[133,134,142,172,184,189,195,196,204,209,]),'compound_stmt':([124,142,189,200,204,209,],[135,144,144,144,144,144,]),'seen_BLP':([136,],[139,]),'statements':([139,],[140,]),'stmt':([142,189,200,204,209,],[143,194,203,207,210,]),'single_stmt':([142,189,200,204,209,],[145,145,145,145,145,]),'if_block':([142,189,200,204,209,],[146,146,146,146,146,]),'for_block':([142,189,200,204,209,],[147,147,147,147,147,]),'while_block':([142,189,200,204,209,],[148,148,148,148,148,]),'prntf_call':([142,189,200,204,209,],[152,152,152,152,152,]),'seen_control':([146,147,148,],[161,162,163,]),'expression':([170,171,180,184,195,],[175,178,186,178,199,]),'expression_stmt':([171,184,],[177,191,]),'before_loop':([196,202,],[200,205,]),'N':([198,205,],[201,208,]),'after_loop':([203,210,],[206,211,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> starter","S'",1,None,None,None),
  ('starter -> starter builder','starter',2,'p_starter','sigParse.py',75),
  ('starter -> builder','starter',1,'p_starter','sigParse.py',76),
  ('builder -> function','builder',1,'p_builder','sigParse.py',80),
  ('builder -> declaration','builder',1,'p_builder','sigParse.py',81),
  ('function -> type identifier seen_identifier LP argument_list seen_argument_list RP compound_stmt','function',8,'p_function','sigParse.py',85),
  ('seen_identifier -> <empty>','seen_identifier',0,'p_seen_identifier','sigParse.py',91),
  ('seen_argument_list -> <empty>','seen_argument_list',0,'p_seen_argument_list','sigParse.py',101),
  ('type -> data_type pointer','type',2,'p_type','sigParse.py',111),
  ('type -> data_type','type',1,'p_type','sigParse.py',112),
  ('data_type -> sign_specifier type_specifier','data_type',2,'p_data_type','sigParse.py',118),
  ('data_type -> type_specifier','data_type',1,'p_data_type','sigParse.py',119),
  ('pointer -> MUL pointer','pointer',2,'p_pointer','sigParse.py',123),
  ('pointer -> MUL','pointer',1,'p_pointer','sigParse.py',124),
  ('sign_specifier -> SIGNED','sign_specifier',1,'p_sign_specifier','sigParse.py',128),
  ('sign_specifier -> UNSIGNED','sign_specifier',1,'p_sign_specifier','sigParse.py',129),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','sigParse.py',133),
  ('type_specifier -> SHORT INT','type_specifier',2,'p_type_specifier','sigParse.py',134),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','sigParse.py',135),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','sigParse.py',136),
  ('type_specifier -> LONG_LONG','type_specifier',1,'p_type_specifier','sigParse.py',137),
  ('type_specifier -> LONG INT','type_specifier',2,'p_type_specifier','sigParse.py',138),
  ('type_specifier -> LONG_LONG INT','type_specifier',2,'p_type_specifier','sigParse.py',139),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','sigParse.py',140),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','sigParse.py',141),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','sigParse.py',142),
  ('type_specifier -> CHAR_STAR','type_specifier',1,'p_type_specifier','sigParse.py',143),
  ('argument_list -> arguments','argument_list',1,'p_argument_list','sigParse.py',164),
  ('argument_list -> <empty>','argument_list',0,'p_argument_list','sigParse.py',165),
  ('arguments -> arguments COMMA arg','arguments',3,'p_arguments','sigParse.py',169),
  ('arguments -> arg','arguments',1,'p_arguments','sigParse.py',170),
  ('arg -> type identifier','arg',2,'p_arg','sigParse.py',174),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','sigParse.py',182),
  ('stmt -> single_stmt','stmt',1,'p_stmt','sigParse.py',183),
  ('compound_stmt -> BLP seen_BLP statements BRP','compound_stmt',4,'p_compound_stmt','sigParse.py',188),
  ('seen_BLP -> <empty>','seen_BLP',0,'p_seen_BLP','sigParse.py',194),
  ('statements -> statements M stmt','statements',3,'p_statements','sigParse.py',203),
  ('statements -> <empty>','statements',0,'p_statements','sigParse.py',204),
  ('single_stmt -> if_block seen_control','single_stmt',2,'p_single_stmt','sigParse.py',217),
  ('single_stmt -> for_block seen_control','single_stmt',2,'p_single_stmt','sigParse.py',218),
  ('single_stmt -> while_block seen_control','single_stmt',2,'p_single_stmt','sigParse.py',219),
  ('single_stmt -> declaration','single_stmt',1,'p_single_stmt','sigParse.py',220),
  ('single_stmt -> function_call SEMICOLON','single_stmt',2,'p_single_stmt','sigParse.py',221),
  ('single_stmt -> RETURN SEMICOLON','single_stmt',2,'p_single_stmt','sigParse.py',222),
  ('single_stmt -> prntf_call SEMICOLON','single_stmt',2,'p_single_stmt','sigParse.py',223),
  ('single_stmt -> RETURN sub_expr SEMICOLON','single_stmt',3,'p_single_stmt','sigParse.py',224),
  ('single_stmt -> CONTINUE SEMICOLON','single_stmt',2,'p_single_stmt','sigParse.py',225),
  ('single_stmt -> BREAK SEMICOLON','single_stmt',2,'p_single_stmt','sigParse.py',226),
  ('seen_control -> <empty>','seen_control',0,'p_seen_control','sigParse.py',253),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','sigParse.py',258),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','sigParse.py',259),
  ('for_block -> FOR LP expression_stmt M expression_stmt M expression RP before_loop N M stmt after_loop','for_block',13,'p_for_block','sigParse.py',268),
  ('before_loop -> <empty>','before_loop',0,'p_before_loop','sigParse.py',279),
  ('after_loop -> <empty>','after_loop',0,'p_after_loop','sigParse.py',285),
  ('if_block -> IF LP expression RP M stmt ELSE N M stmt','if_block',10,'p_if_block','sigParse.py',291),
  ('if_block -> IF LP expression RP M stmt','if_block',6,'p_if_block','sigParse.py',292),
  ('while_block -> WHILE M LP expression RP M before_loop stmt after_loop','while_block',9,'p_while_block','sigParse.py',310),
  ('declaration -> type declaration_list SEMICOLON','declaration',3,'p_declaration','sigParse.py',320),
  ('declaration -> declaration_list SEMICOLON','declaration',2,'p_declaration','sigParse.py',321),
  ('declaration -> unary_expr','declaration',1,'p_declaration','sigParse.py',322),
  ('declaration_list -> declaration_list COMMA sub_decl','declaration_list',3,'p_declaration_list','sigParse.py',329),
  ('declaration_list -> sub_decl','declaration_list',1,'p_declaration_list','sigParse.py',330),
  ('sub_decl -> assignment_expr','sub_decl',1,'p_sub_decl','sigParse.py',334),
  ('sub_decl -> identifier','sub_decl',1,'p_sub_decl','sigParse.py',335),
  ('sub_decl -> array_access','sub_decl',1,'p_sub_decl','sigParse.py',336),
  ('expression -> expression COMMA sub_expr','expression',3,'p_expression','sigParse.py',340),
  ('expression -> sub_expr','expression',1,'p_expression','sigParse.py',341),
  ('sub_expr -> sub_expr GR sub_expr','sub_expr',3,'p_sub_expr','sigParse.py',352),
  ('sub_expr -> sub_expr LS sub_expr','sub_expr',3,'p_sub_expr','sigParse.py',353),
  ('sub_expr -> sub_expr EQ sub_expr','sub_expr',3,'p_sub_expr','sigParse.py',354),
  ('sub_expr -> sub_expr NOT_EQ sub_expr','sub_expr',3,'p_sub_expr','sigParse.py',355),
  ('sub_expr -> sub_expr GR_EQ sub_expr','sub_expr',3,'p_sub_expr','sigParse.py',356),
  ('sub_expr -> sub_expr LS_EQ sub_expr','sub_expr',3,'p_sub_expr','sigParse.py',357),
  ('sub_expr -> sub_expr LOGICAL_AND M sub_expr','sub_expr',4,'p_sub_expr','sigParse.py',358),
  ('sub_expr -> sub_expr LOGICAL_OR M sub_expr','sub_expr',4,'p_sub_expr','sigParse.py',359),
  ('sub_expr -> NOT sub_expr','sub_expr',2,'p_sub_expr','sigParse.py',360),
  ('sub_expr -> arithmetic_expr seen_arith','sub_expr',2,'p_sub_expr','sigParse.py',361),
  ('sub_expr -> assignment_expr','sub_expr',1,'p_sub_expr','sigParse.py',362),
  ('sub_expr -> unary_expr','sub_expr',1,'p_sub_expr','sigParse.py',363),
  ('seen_arith -> <empty>','seen_arith',0,'p_seen_arith','sigParse.py',391),
  ('assignment_expr -> lhs assign arithmetic_expr seen_arch','assignment_expr',4,'p_assignment_expr','sigParse.py',396),
  ('assignment_expr -> lhs assign array_access seen_array','assignment_expr',4,'p_assignment_expr','sigParse.py',397),
  ('assignment_expr -> lhs assign function_call seen_func_call','assignment_expr',4,'p_assignment_expr','sigParse.py',398),
  ('assignment_expr -> lhs assign unary_expr seen_unary','assignment_expr',4,'p_assignment_expr','sigParse.py',399),
  ('seen_arch -> <empty>','seen_arch',0,'p_seen_arch','sigParse.py',414),
  ('seen_array -> <empty>','seen_array',0,'p_seen_array','sigParse.py',419),
  ('seen_func_call -> <empty>','seen_func_call',0,'p_seen_func_call','sigParse.py',424),
  ('seen_unary -> <empty>','seen_unary',0,'p_seen_unary','sigParse.py',429),
  ('unary_expr -> identifier INCREMENT','unary_expr',2,'p_unary_expr','sigParse.py',434),
  ('unary_expr -> identifier DECREMENT','unary_expr',2,'p_unary_expr','sigParse.py',435),
  ('unary_expr -> DECREMENT identifier','unary_expr',2,'p_unary_expr','sigParse.py',436),
  ('unary_expr -> INCREMENT identifier','unary_expr',2,'p_unary_expr','sigParse.py',437),
  ('lhs -> identifier seen_id','lhs',2,'p_lhs','sigParse.py',449),
  ('lhs -> array_access','lhs',1,'p_lhs','sigParse.py',450),
  ('seen_id -> <empty>','seen_id',0,'p_seen_id','sigParse.py',459),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','sigParse.py',464),
  ('assign -> ASSIGN','assign',1,'p_assign','sigParse.py',477),
  ('assign -> ADD_ASSIGN','assign',1,'p_assign','sigParse.py',478),
  ('assign -> SUB_ASSIGN','assign',1,'p_assign','sigParse.py',479),
  ('assign -> DIV_ASSIGN','assign',1,'p_assign','sigParse.py',480),
  ('assign -> MOD_ASSIGN','assign',1,'p_assign','sigParse.py',481),
  ('assign -> MUL_ASSIGN','assign',1,'p_assign','sigParse.py',482),
  ('arithmetic_expr -> arithmetic_expr ADD arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','sigParse.py',489),
  ('arithmetic_expr -> arithmetic_expr SUB arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','sigParse.py',490),
  ('arithmetic_expr -> arithmetic_expr MUL arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','sigParse.py',491),
  ('arithmetic_expr -> arithmetic_expr DIV arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','sigParse.py',492),
  ('arithmetic_expr -> arithmetic_expr MOD arithmetic_expr','arithmetic_expr',3,'p_arithmetic_expr','sigParse.py',493),
  ('arithmetic_expr -> LP arithmetic_expr RP','arithmetic_expr',3,'p_arithmetic_expr','sigParse.py',494),
  ('arithmetic_expr -> SUB arithmetic_expr','arithmetic_expr',2,'p_arithmetic_expr','sigParse.py',495),
  ('arithmetic_expr -> identifier','arithmetic_expr',1,'p_arithmetic_expr','sigParse.py',496),
  ('arithmetic_expr -> constant','arithmetic_expr',1,'p_arithmetic_expr','sigParse.py',497),
  ('constant -> DEC_CONSTANT','constant',1,'p_constant','sigParse.py',524),
  ('constant -> HEX_CONSTANT','constant',1,'p_constant','sigParse.py',525),
  ('constant -> CHAR_CONSTANT','constant',1,'p_constant','sigParse.py',526),
  ('constant -> FLOAT_CONSTANT','constant',1,'p_constant','sigParse.py',527),
  ('array_access -> identifier MLP array_index MRP','array_access',4,'p_array_access','sigParse.py',534),
  ('array_index -> constant','array_index',1,'p_array_index','sigParse.py',555),
  ('array_index -> identifier','array_index',1,'p_array_index','sigParse.py',556),
  ('function_call -> identifier LP parameter_list RP','function_call',4,'p_function_call','sigParse.py',561),
  ('function_call -> identifier LP RP','function_call',3,'p_function_call','sigParse.py',562),
  ('prntf_call -> PRNTF LP STRING RP','prntf_call',4,'p_prntf_call','sigParse.py',570),
  ('prntf_call -> PRNTF LP STRING COMMA parameter_list RP','prntf_call',6,'p_prntf_call','sigParse.py',571),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','sigParse.py',579),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','sigParse.py',580),
  ('parameter -> sub_expr','parameter',1,'p_parameter','sigParse.py',584),
  ('parameter -> STRING','parameter',1,'p_parameter','sigParse.py',585),
  ('M -> <empty>','M',0,'p_M','sigParse.py',597),
  ('N -> <empty>','N',0,'p_N','sigParse.py',602),
]
